# **data.frame** {.unnumbered}

Los **data.frame** son uno de los almacenes de datos que usaremos más frecuentemente en R.

Por analogía, tienen una estructura similar a una hoja de cálculo de MS Excel.

+ En las filas, tenemos las **observaciones** o **casos**
+ En las columnas, tenemos las **variables** o **características**

Las columnas deben tener un único tipo de dato. Las filas, por el contrario, pueden tener datos de distintos tipos de datos, que *caracterizan* a la observación o caso.

## Formato 'ordenado de los datos'

Existe un estándar de lo que podríamos llamar **el buen data.frame** ('*tidy data*'). Tiene las siguientes características:

+ Cada observación está en una fila
+ Cada variable está en una columna
+ Cada celda tiene un valor de un único tipo de variable

Existen acciones en casi todas las fases de la metodología sistemática de análisis de datos encaminadas a garantizar que los datos originales terminen en el formato *tidy*:

|Fase|Acciones|Objetivo|
|-|-|-|
|Ingesta|Ingerir la codificación adecuada|Evita que haya símbolos extraños|
|Limpieza|Eliminar filas espurias<br>Eliminar columnas espurias|Elimina datos indeseados|
|EDA|Exploración de la estructura|Evalúa si existen variables u observaciones '*non-tidy*'|
|Transformación|Pivotaje corto-largo<br>Separación columnas<br>Creación columnas|Garantizar que los datos tienen el formato *tidy* para el análisis|

## Creación (Ingesta) de data.frames

Los *data.frame* se pueden construir de varias maneras. Los más frecuentes son los siguientes:

- Importando los datos desde un archivo
- Cargar datos incluidos en R
- Crearlo a partir de una base de datos en Internet
- Construirlo manualmente


::: {.callout-tip collapse="true" title="BÁSICO - Crear un data.frame desde un archivo con `rio::import()`"}
El método más frecuente para crear *data.frames* es la lectura directa de un archivo. Lo podemos hacer:

- De manera interactiva, con el menú 'Import Dataset' de la pestaña 'Entorno'
- Con código, por ejemplo con la función `rio::import()`

Si el archivo no está en la ruta raíz del proyecto, deberemos indicar la ruta.

```{r}
titanic <- rio::import(
  here::here(
    'data', 'raw', 'titanic_dataset.csv'
  )
)
```

:::

::: {.callout-tip collapse="true" title="BÁSICO - Crear un data.frame a partir de datos precargados en R con `data()`"}
Otro método frecuente para crear un *data.frame* es la lectura directa de datos que ya vienen precargados en R. Para eso utilizaremos la función `data()`.

Estos datos se cargan directamente con el nombre con que se han almacenado, y no es necesario asignarlos a un nuevo objeto.

```{r}
data(
  diamonds,            # nombre del conjunto de datos a cargar
  package = 'ggplot2'  # paquete en el que está el conjunto de datos
)
```

:::

::: {.callout-tip collapse="true" title="BÁSICO - Crear un data.frame a partir de una url con `readr::read_csv()`"}
El tercer método para crear dataset es cargarlo directamente desde una ubicación en internet.

En este caso, utilizaremos la función `read_csv()` del paquete **readr**.

```{r}
# Comprobamos que tenemos instalado el paquete necesario
if (!require(readr)) install.packages('readr')

# Identificamos la URL
# Los datos del ejemplo se han descargado de https://www.ecdc.europa.eu/en/publications-data/data-national-14-day-notification-rate-covid-19
url <- 'https://opendata.ecdc.europa.eu/covid19/nationalcasedeath/csv/data.csv'

# Creamos el data.frame
ecdcCovid19NationalCaseDeath <- readr::read_csv(url)

```

:::


::: {.callout-tip collapse="true" title="BÁSICO - Crear un data.frame desde cero uniendo vectores de manera manual"}
El último método para crear un *data.frame* es construirlo pieza a pieza, uniendo los vectores (variables) que queremos incluir. Si optamos por este método, es importante que todos los vectores tengan la misma longitud, o no se podrá construir el dataframe.

Vamos a crear un *data.frame* a partir de los vectores creados en el capítulo 'Vectores'.

En primer lugar, definiremos de nuevo los vectores:

```{r}
# Definimos los vectores que queremos incluir en el data.frame
esElfo <- c(FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE)
porcentaje <- c(35.5, 4.5, 5.25, 14.75, 14.9, 5.1, 20)
raza <- c('Humano', 'Elfo', 'Hobbit', 'Enano','Orco', 'Ent', 'Troll')
numeroOrejas <- c(2L, 2L, 2L, 2L, 2L, 0L, 0L)
numeroPiercings <- 3 * numeroOrejas
individuosRaza <- 100000*porcentaje
nPiercingsNecesario <- individuosRaza * numeroPiercings
esMaligno <- c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE)
```

A continuación, crearemos el *data.frame*, indicando el orden en que queremos las variables:
```{r}
# Creamos el data.frame

lotr <- data.frame(
  raza,
  porcentaje,
  individuosRaza,
  numeroOrejas,
  numeroPiercings,
  esElfo,
  esMaligno
)
```

:::

## Análisis exploratorio y manipulación

Para acceder a elementos de un *data.frame*, tendremos en mente el esquema general siguiente:

`nombreDataFrame[fila, columna]`

de modo que indicaremos el nombre del objeto, seguido de la fila o columna que queremos acceder entre corchetes, y separadas por comas.

::: {.callout-tip collapse="true" title="BÁSICO - EDA. Acceso a todo el data.frame"}
Si no indicamos ni fila ni columna, R devolverá todo el data.frame
```{r}
# Si no indicamos ni fila ni columna, R devolverá todo el data.frame
lotr[,]
```
:::

::: {.callout-tip collapse="true" title="BÁSICO - EDA. Acceder a filas en un data.frame"}
Si indicamos una fila, pero no la columna, R devolverá los valores de cada variable para la observación seleccionada
```{r}
# Si indicamos una fila, pero no la columna, R devolverá los valores de cada variable para la observación seleccionada
lotr[3,]
```
:::

::: {.callout-tip collapse="true" title="BÁSICO - EDA. Acceder a columnas en un data.frame (1) - Sintaxis con `[,]`"}
Si indicamos una columna, pero no la fila, R devolverá todos los valores de la variable para todas las observaciones
```{r}
# Si indicamos una columna, pero no la fila, R devolverá todos los valores de la variable para todas las observaciones
lotr[,3]
```
:::

::: {.callout-tip collapse="true" title="BÁSICO - EDA. Acceder a columnas en un data.frame (2) - Sintaxis con `$`"}
Podemos utilizar una sintaxis alternativa para acceder a las variables, utilizando el símbolo `$`, 
```{r}
# Obtenemos el mismo resultado utilizando la sintaxis con corchetes
lotr$individuosRaza
```
:::

::: {.callout-tip collapse="true" title="BÁSICO - EDA. Acceder a celdas en un data.frame"}
Si indicamos fila y columna, R devolverá el valor de la celda
```{r}
# Si indicamos fila y columna, R devolverá el valor de la celda
lotr[3,3]
```
:::

## Limpieza

### Renombrado de filas

Por defecto, las filas vienen sin nombre, y se numeran desde 1 en adelante. Si queremos ponerles un nombre, podemos hacerlo con la función `rownames()`

::: {.callout-tip collapse="true" title="BÁSICO - Dar nombre a las filas de un data.frame con `rownames()`"}
Para ello haremos dos acciones:

- Definiremos un vector de tipo **character** con los nombres deseados
- Aplicaremos los nombres a las filas del *data.frame*

OJOCUIDAO: El vector de nombres tiene que tener el mismo número de elementos que el número de filas del *data.frame*

```{r}
# Comprobamos que la tabla original no tiene nombres de fila
rownames(lotr)

# Definimos el vector de nombres de las filas.
nombresFilas <- raza

# Aplicamos los nombres a la tabla
rownames(lotr) <- nombresFilas

# Comprobamos que las filas tienen ahora nombres
rownames(lotr)
```
:::

### Renombrado de columnas
Mucho más útil es renombrar las columnas o nombres de las variables. Para ello utilizaremos la función `colnames()`

::: {.callout-tip collapse="true" title="BÁSICO - Cambiar nombre a las columnas de un data.frame con `colnames()`"}
Para ello haremos dos acciones:

- Definiremos un vector de tipo **character** con los nombres deseados
- Aplicaremos los nombres a las columnas del *data.frame*

OJOCUIDAO: El vector de nombres tiene que tener el mismo número de elementos que el número de columnas del *data.frame*

```{r}
# revisamos el nombre original de las columnas
colnames(lotr)

# Definimos el vector de nombres de las columnas
nombresColumnas <- c(
  'raza',
  'porcentajePoblacion',
  'individuos',
  'nOrejas',
  'nPiercings',
  'esElfo',
  'esMaligno'
)

# Aplicamos los nombres a la tabla
colnames(lotr) <- nombresColumnas

# Comprobamos que las filas tienen ahora nombres
colnames(lotr)
```
:::

### Estandarización del formato de nombres de columna
Los lenguajes de programación se llevan mal con algunos caracteres, como las tildes, los símbolos, o los espacios. Por este motivo, es una buena práctica utilizar un procedimiento lo más estandarizado posible para nombrar objetos y variables en R.

Para facilitarnos la nominación de variables, el paquete **janitor** tiene la función `clean_names()`

::: {.callout-tip collapse="true" title="BÁSICO - Normalizar nombres de columnas con `janitor::clean_names()`"}
La función `janitor::clean_names()` puede utilizarse directamente sobre un *data.frame*

```{r}
# Comprobamos los nombres originales
colnames(lotr)

# Asignamos los nombres normalizados de janitor::cleanNames()
lotr <- janitor::clean_names(lotr)

# Comprobamos los nuevos nombres
colnames(lotr)
```

:::

### Eliminación de datos innecesarios

Los datos innecesarios para alcanzar los objetivos de nuestro análisis deben ser eliminados de las bases de datos de trabajo (*lab*).

Nunca modificaremos las bases de dato de origen (*raw*), lo que nos permitirá construir nuevas bases de datos si cambiasen las necesidades.

Existen dos métodos de eliminación de datos:

|Método|Método|Utilidad|
|-|-|-|
|Eliminación total|Asignación `NULL`|Variables y observaciones espúrias|
|Eliminación lógica|`filter()`<br>`select()`|Filtrado y selección de variables para un análisis concreto|

#### Eliminación total - Asignación del valor `NULL` a filas o columnas

::: {.callout-tip collapse="true" title="BÁSICO - Eliminación total de filas o columnas con `NULL`"}
Para poder eliminar una fila o una columna de manera permanente, sólo hay que seleccionarla y asignarle el valor `NULL`.

Por ejemplo, si queremos eliminar la variable 'Ticket' de la base de datos `titanic`:

```{r}
# Ejemplo <- Eliminación del ID de ticket de la base 'titanic'
## Estructura antes de la eliminación
str(titanic)

## Asignamos el valor NULL
titanic$Ticket <- NULL

## Estructura después de la eliminación
str(titanic)
```
:::

#### Eliminación lógica - Filtrado de observaciones (filas) 
Para filtrar filas, podemos utilizar los mismos métodos que utilizamos para seleccionar elementos en un vector:

- Indicar un vector lógico
- Indicar un índice (o vector de índices)
- Indicar el nombre de la fila (si tiene nombres)

El tercer método no se utiliza habitualmente, porque es muy raro que las observaciones tengan un nombre asociado.

::: {.callout-tip collapse="true" title="BÁSICO - Filtrar filas de un data.frame (1) - Vector lógico"}
Vamos a utilizar la base de ejemplo `titanic` para identificar las observaciones que corresponden a pasajeros de segunda clase. Seguiremos el siguiente método

+ Paso 1 - Creamos un vector lógico que identifique estos pacientes
+ Paso 2 - Filtramos las filas utilizando este vector

```{r}
## Paso 1 - Creamos un vector lógico que identifique estos pacientes
esSegundaClase <- titanic$Pclass == 2

## Paso 2 - Filtramos las filas utilizando este vector
titanic[esSegundaClase,]

```
:::

::: {.callout-tip collapse="true" title="BÁSICO - Filtrar filas de un data.frame (2) - Vector índices"}
Vamos a utilizar la base de ejemplo `titanic` para identificar las observaciones que corresponden a pasajeros de segunda clase. Seguiremos el siguiente método

+ Paso 1 - Creamos un vector de índices que identifique estos pacientes
+ Paso 2 - Filtramos las filas utilizando este vector

```{r}
# Paso 1 - Creamos un vector de índices que identifique estos pacientes
indiceSegundaClase <- which(titanic$Pclass == 2)

# Paso 2 - Filtramos las filas utilizando este vector
titanic[indiceSegundaClase,]
```
:::

Además de los métodos indicados, se pueden utilizar funciones para el filtro de observaciones. La más utilizada (intensivamente) es `dplyr::filter()`

::: {.callout-tip collapse="true" title="BÁSICO - Filtrar filas de un data.frame (3) - Función `dplyr::filter()`"}
Este método es el más utilizado por varios motivos:

- Sencillez de sintaxis
- Permite encadenar una serie de acciones utilizando las *pipe* `|>` 
```{r}
                    # Interpretación del código
titanic |>          ## Parte de la base de datos titanic, y ENTONCES 
  dplyr::filter(    ## filtra
    Pclass == 2,    ## observaciones que tengan clase de pasajero 2,
    Embarked == 'S' ## y embarcadas en Southhampton (S)
  )
```
:::

#### Eliminación lógica - Selección de variables (columnas)

De nuevo, hay varios métodos. Algunos son análogos a los que vimos en vectores:

- Selección con un vector lógico
- Selección con un vector de índices
- Selección por nombre de variables

::: {.callout-tip collapse="true" title="BÁSICO - Seleccionar columnas de un data.frame (1) - Vector lógico"}
Vamos a utilizar la base de ejemplo `titanic` para identificar las variables de interés. Seguiremos el siguiente método

+ Paso 1 - Crearemos el vector de variables que queremos seleccionar
+ Paso 2 - Crearemos un vector **character** con los nombres de las variables del *data.frame*
+ Paso 3 - Crearemos un vector lógico que valores si los elementos del vector de nombres del *data.frame* está en el vector de variables a seleccionar
+ Paso 4 - Selecionaremos las variables con el vector lógico

```{r}
# Paso 1 - Crearemos el vector de variables que queremos seleccionar
variablesSeleccionadas <- c(
  'Survived',
  'Pclass',
  'Sex',
  'Age',
  'SibSp'
)
# Paso 2 - Crearemos un vector **character** con los nombres de variables del *data.frame*
variablesDataframe <- names(titanic)

# Paso 3 - Crearemos un vector lógico que valores si los elementos del vector de nombres del *data.frame* está en el vector de variables a seleccionar
esVariableSeleccionada <- variablesDataframe %in% variablesSeleccionadas

# Paso 4 - Selecionaremos las variables con el vector lógico
titanic[,esVariableSeleccionada]

```
:::

::: {.callout-tip collapse="true" title="BÁSICO - Seleccionar columnas de un data.frame (2) - Vector índices"}
Vamos a utilizar la base de ejemplo `titanic` para identificar las variables de interés. Seguiremos el siguiente método

+ Paso 1 - Crearemos el vector de variables que queremos seleccionar
+ Paso 2 - Crearemos un vector **character** con los nombres de las variables del *data.frame*
+ Paso 3 - Crearemos un vector con los índices de los elementos del vector de nombres del *data.frame* que están en el vector de variables a seleccionar
+ Paso 4 - Seleccionaremos las variables con el vector de índices

```{r}
# Paso 1 - Crearemos el vector de variables que queremos seleccionar
variablesSeleccionadas <- c(
  'Survived',
  'Pclass',
  'Sex',
  'Age',
  'SibSp'
)
# Paso 2 - Crearemos un vector **character** con los nombres de las variables del *data.frame*
variablesDataframe <- names(titanic)

# Paso 3 - Crearemos un vector con los índices de los elementos del vector de nombres del *data.frame* que están en el vector de variables a seleccionar
indicesVariablesSeleccionadas <- which(variablesDataframe %in% variablesSeleccionadas)

# Paso 4 - Selecionaremos las variables con el vector de índices
titanic[,indicesVariablesSeleccionadas]
```
:::

::: {.callout-tip collapse="true" title="BÁSICO - Seleccionar columnas de un data.frame (3) - Vector de nombres"}
Vamos a utilizar la base de ejemplo `titanic` para identificar las variables de interés. Seguiremos el siguiente método

+ Paso 1 - Crearemos el vector de variables que queremos seleccionar
+ Paso 2 - Crearemos un vector **character** con los nombres de las variables del *data.frame*
+ Paso 3 - Seleccionaremos las variables con el vector de nombres

```{r}
# Paso 1 - Crearemos el vector de variables que queremos seleccionar
variablesSeleccionadas <- c(
  'Survived',
  'Pclass',
  'Sex',
  'Age',
  'SibSp'
)
# Paso 2 - Crearemos un vector **character** con los nombres de las variables del *data.frame*
variablesDataframe <- names(titanic)

# Paso 4 - Selecionaremos las variables con el vector de índices
titanic[,variablesSeleccionadas]
```
:::

Además de los métodos análogos a la manipulación de vectores, podemos utilizar la función `dplyr::select()`

::: {.callout-tip collapse="true" title="BÁSICO - Seleccionar columnas de un data.frame (4) - Función `dplyr::select()`"}
Vamos a utilizar la base de ejemplo `titanic` para identificar las variables de interés.

```{r}
titanic |> 
  dplyr::select(
    Survived,
    Pclass,
    Sex,
    Age,
    SibSp
  )
```

:::


## Transformación

La transformación de los datos se enfoca a un determinado objetivo del análisis.
La intencionalidad condiciona la transformación que haremos.

Existen tres grandes grupos de transformaciones:

+ Los procesos de resumen: intentan describir, de manera general cómo se comportan la totalidad o un grupo de las observaciones del *data.frame*
+ Los procesos gráficos: reordenan, modifican o crean variables en el *data.frame* con objeto de crear un determinado tipo de gráfico
+ Los procesos analíticos: los cambios van enfocados a obtener determinadas variables necesarias para un análisis concreto

No veremos en detalle todas las transformaciones que se pueden hacer con los datos. Sólo indicaremos las más elementales:

### La triada mágica del resumen: Filtrar, agrupar, resumir

Este método es muy utilizado, y es la base para una gran cantidad de aplicaciones en inteligencia de negocio (gestión)

Aplica tres procesos consecutivos a la base de datos:

+ Paso 1 - Filtra las observaciones de interés
+ Paso 2 - Agrupa las observaciones por una o más características categóricas
+ Paso 3 - Aplica alguna acción de resumen sobre los datos (media, suma, máximo, ...)

::: {.callout-tip collapse="true" title="BÁSICO - Triada mágica: `dplyr::filter()` + `dplyr::group_by()` + `dplyr::summarise()`"}
Veamos un ejemplo con la base de datos `titanic`. Vamos a identificar cuántos pasajeros mujeres han sobrevivido de cada una de las clases de pasaje.

```{r}
# Pregunta: Cuántos pasajeros mujeres han sobrevivido de cada una de las clases de pasaje

titanic |> 
  # Paso 1 - Filtrado: Sólo nos interesan las mujeres
  dplyr::filter(
    Sex == 'female'
  ) |> 
  
  # Paso 2 - Agrupado: Queremos subtotales por clase de pasajero
  dplyr::group_by(
    Pclass
  ) |> 
  
  dplyr::summarise(
    n = sum(dplyr::n())
  )
```
:::


